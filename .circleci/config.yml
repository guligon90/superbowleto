version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-ecs: circleci/aws-ecs@1.1.0

_run:
  prepare_to_deploy: &prepare_to_deploy
    name: Prepare to deploy
    command: |
      mkdir -p ~/.local/bin
      # install jq
      curl -sSL -o ~/.local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod +x ~/.local/bin/jq
      # install ecs-deploy (in work version)
      curl -sSL -o /tmp/ecs-deploy.tar.gz https://github.com/silinternational/ecs-deploy/archive/3.4.0.tar.gz && tar xvfz /tmp/ecs-deploy.tar.gz -C /tmp && sudo cp /tmp/ecs-deploy-3.4.0/ecs-deploy ~/.local/bin/ecs-deploy
      pip install awscli --upgrade --user
  pull_sonar_image: &pull_sonar_image
    name: Pull Docker sonar-scanner image
    command: |
      echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
      docker pull pagarme/sonar-scanner

jobs:
  test:
    machine: true
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - checkout
      - run:
          name: Build docker-compose containers
          command: docker-compose build
      - run:
          name: Run linter
          command: make lint
      - run:
          name: Run tests
          command: make test-ci
      - store_test_results:
          path: ./reports
      - store_artifacts:
          path: ./reports
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./
  sonar:
    machine: true
    steps:
      - attach_workspace:
          at: ~/project
      - run: *pull_sonar_image
      - run:
          name: Superbowleto Analysis
          command: make sonar BRANCH=$CIRCLE_BRANCH
  build_image:
    working_directory: ~/superbowleto
    machine: true
    steps:
      - checkout
      - run:
          name: Build docker image
          command: |
              mkdir -p images
              export NODE_ENV=production
              docker build --file=Dockerfile.prod -t build:latest .
              docker save -o images/build.tar build:latest
      - persist_to_workspace:
          root: images
          paths:
             -  build.tar
  push_stg:
    working_directory: ~/superbowleto
    machine: true
    steps:
      - attach_workspace:
         at: ~/superbowleto/images
      - run:
          name: Push stg
          command: |
            docker load -i ~/superbowleto/images/build.tar
            export AWS_ACCESS_KEY_ID=$STG_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$STG_AWS_SECRET_ACCESS_KEY
            export AWS_ACCOUNT=$STG_AWS_ACCOUNT
            #ecr-login
            eval $(aws ecr get-login --region us-east-1 --no-include-email)
            # build and push server
            export STG_IMAGE="$STG_AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/superbowleto-stg"
            docker tag build:latest ${STG_IMAGE}:$CIRCLE_TAG
            docker push ${STG_IMAGE}:$CIRCLE_TAG
            docker tag build:latest ${STG_IMAGE}:latest
            docker push ${STG_IMAGE}:latest

  run_migrations:
    working_directory: ~/superbowleto
    machine: true
    steps:
      - checkout
      - run:
          name: run migrations
          command: npm install && node script/run_migrations_task.js

  push_sdx:
    working_directory: ~/superbowleto
    machine: true
    steps:
      - attach_workspace:
         at: ~/superbowleto/images
      - run:
          name: Push sdx
          command: |
            docker load -i ~/superbowleto/images/build.tar
            export AWS_ACCESS_KEY_ID=$SDX_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$SDX_AWS_SECRET_ACCESS_KEY
            export AWS_ACCOUNT=$SDX_AWS_ACCOUNT
            #ecr-login
            eval $(aws ecr get-login --region us-east-1 --no-include-email)
            # build and push server
            export SDX_IMAGE="$SDX_AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/superbowleto-sdx"
            docker tag build:latest ${SDX_IMAGE}:$CIRCLE_TAG
            docker push ${SDX_IMAGE}:$CIRCLE_TAG
            docker tag build:latest ${SDX_IMAGE}:latest
            docker push ${SDX_IMAGE}:latest
  push_prd:
    working_directory: ~/superbowleto
    machine: true
    steps:
      - attach_workspace:
          at: ~/superbowleto/images
      - run:
          name: Push prd
          command: |
            docker load -i ~/superbowleto/images/build.tar
            export AWS_ACCESS_KEY_ID=$PRD_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PRD_AWS_SECRET_ACCESS_KEY
            export AWS_ACCOUNT=$PRD_AWS_ACCOUNT
            #ecr-login
            eval $(aws ecr get-login --region us-east-1 --no-include-email)
            # build and push server
            export PRD_IMAGE="$PRD_AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/superbowleto-prd"
            docker tag build:latest ${PRD_IMAGE}:$CIRCLE_TAG
            docker push ${PRD_IMAGE}:$CIRCLE_TAG
            docker tag build:latest ${PRD_IMAGE}:latest
            docker push ${PRD_IMAGE}:latest
  deploy_stg:
    working_directory: ~/superbowleto
    machine: true
    steps:
      - run: *prepare_to_deploy
      - checkout
      - run:
          name: Deploy stg
          command: |
            # deploy in live
            export STG_IMAGE="$STG_AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/superbowleto-stg:$CIRCLE_TAG"
            export AWS_ACCESS_KEY_ID=$STG_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$STG_AWS_SECRET_ACCESS_KEY
            export AWS_DEFAULT_REGION=$REGION
            export PATH=$HOME/.local/bin:$PATH # put aws in the path
            ~/.local/bin/ecs-deploy --max-definitions 1 --enable-rollback -c $STG_CLUSTER -r $REGION -n superbowleto-s-stg -i $STG_IMAGE --timeout $TIMEOUT
            ~/.local/bin/ecs-deploy --max-definitions 1 --enable-rollback -c $STG_CLUSTER -r $REGION -n superbowleto-w-stg -i $STG_IMAGE --timeout $TIMEOUT
  deploy_sdx:
    working_directory: ~/superbowleto
    machine: true
    steps:
      - run: *prepare_to_deploy
      - checkout
      - run:
          name: Deploy sdx
          command: |
            # deploy in live
            export SDX_IMAGE="$SDX_AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/superbowleto-sdx:$CIRCLE_TAG"
            export AWS_ACCESS_KEY_ID=$SDX_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$SDX_AWS_SECRET_ACCESS_KEY
            export AWS_DEFAULT_REGION=$REGION
            export PATH=$HOME/.local/bin:$PATH # put aws in the path
            ~/.local/bin/ecs-deploy --max-definitions 2 --enable-rollback -c $SDX_CLUSTER -r $REGION -n superbowleto-s-sdx -i $SDX_IMAGE --timeout $TIMEOUT
            ~/.local/bin/ecs-deploy --max-definitions 2 --enable-rollback -c $SDX_CLUSTER -r $REGION -n superbowleto-w-sdx -i $SDX_IMAGE --timeout $TIMEOUT
  deploy_prd:
    working_directory: ~/superbowleto
    machine: true
    steps:
      - run: *prepare_to_deploy
      - checkout
      - run:
          name: Deploy prd
          command: |
            # deploy in live
            export PRD_IMAGE="$PRD_AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/superbowleto-prd:$CIRCLE_TAG"
            export AWS_ACCESS_KEY_ID=$PRD_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PRD_AWS_SECRET_ACCESS_KEY
            export AWS_DEFAULT_REGION=$REGION
            export PATH=$HOME/.local/bin:$PATH # put aws in the path
            ~/.local/bin/ecs-deploy --max-definitions 2 --enable-rollback -c $PRD_CLUSTER -r $REGION -n superbowleto-s-prd -i $PRD_IMAGE --timeout $TIMEOUT
            ~/.local/bin/ecs-deploy --max-definitions 2 --enable-rollback -c $PRD_CLUSTER -r $REGION -n superbowleto-w-prd -i $PRD_IMAGE --timeout $TIMEOUT
workflows:
  version: 2
  build_and_deploy:
    jobs:
    # - test:
    #     filters:
    #       tags:
    #         only: /^v.*/
    # - sonar:
    #     context: dockerhub
    #     requires:
    #       - test
    #     filters:
    #       tags:
    #         only: /^v.*/
    - build_image:
        # requires:
        #   - sonar
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    # - hold_stg:
    #     type: approval
    #     requires:
    #       - build_image
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    # - hold_sdx:
    #     type: approval
    #     requires:
    #       - build_image
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    # - hold_prd:
    #     type: approval
    #     requires:
    #       - build_image
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    - push_stg:
        requires:
          # - hold_stg
          - build_image
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    # - push_sdx:
    #     requires:
    #       - hold_sdx
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    # - push_prd:
    #     requires:
    #       - hold_prd
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    # - deploy_stg:
    #     requires:
    #       - push_stg
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    # - aws-ecr/build-and-push-image:
    #     name: build-and-push-image-stg
    #     account-url: STG_AWS_ACCOUNT_URL
    #     aws-access-key-id: STG_AWS_ACCESS_KEY_ID
    #     aws-secret-access-key: STG_AWS_SECRET_ACCESS_KEY
    #     region: REGION
    #     repo: 'jaiminho-stg'
    #     tag: "latest,${CIRCLE_SHA1}"
    #     requires:
    #       - push_stg
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+).*$/

    - aws-ecs/update-task-definition:
        name: update-task-definition-server-stg
        aws-region: $REGION
        aws-access-key-id: $STG_AWS_ACCESS_KEY_ID
        aws-secret-access-key: $STG_AWS_SECRET_ACCESS_KEY
        container-image-name-updates: 'container=superbowleto-s-stg,image-and-tag=${STG_AWS_ACCOUNT_URL}/superbowleto-stg:$CIRCLE_TAG'
        family: 'superbowleto-s-stg'
        requires:
          - push_stg
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/

    - run_migrations:
        requires:
          - update-task-definition-server-stg
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/

    - aws-ecs/deploy-service-update:
        name: update-service-server-stg
        aws-region: $REGION
        aws-access-key-id: $STG_AWS_ACCESS_KEY_ID
        aws-secret-access-key: $STG_AWS_SECRET_ACCESS_KEY
        family: 'superbowleto-s-stg'
        cluster-name: 'cluster-stg'
        service-name: 'superbowleto-s-stg'
        requires:
          - run_migrations
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/

    # - deploy_sdx:
    #     requires:
    #       - push_sdx
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    # - deploy_prd:
    #     requires:
    #       - push_prd
    #     filters:
    #       branches:
    #         ignore: /.*/
    #       tags:
    #         only: /^v([0-9]+).([0-9]+).([0-9]+)$/
